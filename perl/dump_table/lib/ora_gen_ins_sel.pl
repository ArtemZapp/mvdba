# $Id: ora_gen_ins_sel.pl 6 2006-09-10 15:35:16Z marcus $
#
# Generates SELECT/INSERT
#

require 'lib/ora_code_util.pl';

sub ins_sel_cmd
{
    #### SELECT/INSERT as command
    my $tab     = shift;
    my @columns = @_ ;

    my $list = join ( "\n     , "     , @columns );

    my $code = <<"    SQL" ;
    CODE --
    CODE -- Generated by: $0
    CODE --
    CODE INSERT INTO $tab --\@dblink
    CODE      ( $list
    CODE      )
    CODE SELECT $list
    CODE   FROM $tab --\@dblink
    CODE  WHERE 1=1
    CODE      ;
    CODE
    SQL

    put_file("${tab}_ins.sql", $code);
    return 1;
}

sub ins_sel_block
{
    #### SELECT/INSERT in PL/SQL block, with commit control
    my $tab     = shift;
    my @columns = @_ ;

    my $list1 =         join ( "\n         , "                 , @columns );
    my $list2 =         join ( "\n                      , "    , @columns );
    my $list3 = "r1." . join ( "\n                      , r1." , @columns );

    my $code = <<"    PLSQL" ;
    CODE --
    CODE -- Generated by: $0
    CODE --
    CODE DECLARE
    CODE     CURSOR c1 IS
    CODE     SELECT $list1
    CODE       FROM $tab -- \@FED.F00000000000001
    CODE      WHERE 1=1
    CODE          ;
    CODE     k   NUMBER := 0;
    CODE     kt  NUMBER := 0;
    CODE BEGIN
    CODE     --
    CODE     -- DBMS_REPUTIL.REPLICATION_OFF;
    CODE     --
    CODE     SELECT count(1)
    CODE       INTO kt
    CODE       FROM $tab  -- \@FED.F00000000000001
    CODE      WHERE 1=1
    CODE          ;
    CODE     --
    CODE     DBMS_APPLICATION_INFO.SET_MODULE
    CODE         ( 'Balance: [$tab]' , 'START');
    CODE     --
    CODE     FOR r1 IN c1
    CODE     LOOP
    CODE         --
    CODE         BEGIN
    CODE             INSERT INTO $tab
    CODE                       ( $list2
    CODE                       )
    CODE                 VALUES( $list3
    CODE                       );
    CODE             --
    CODE             IF MOD( c1%ROWCOUNT, 5000)
    CODE             THEN
    CODE                 COMMIT;
    CODE             END IF;
    CODE             --
    CODE         EXCEPTION
    CODE             WHEN DUP_VAL_ON_INDEX THEN NULL;
    CODE         END;
    CODE         --
    CODE         k := k + 1;
    CODE         DBMS_APPLICATION_INFO.SET_ACTION
    CODE             ( 'Progress: '||TO_CHAR(k ,'999g999g999g990')||'/'
    CODE                           ||TO_CHAR(kt,'999g999g999g990') );
    CODE         --
    CODE     END LOOP;
    CODE     --
    CODE     -- COMMIT;
    CODE     -- DBMS_REPUTIL.REPLICATION_ON;
    CODE     --
    CODE     DBMS_APPLICATION_INFO.SET_ACTION
    CODE         ( 'Final: '||TO_CHAR(k ,'999g999g999g990')||'/'
    CODE                    ||TO_CHAR(kt,'999g999g999g990') );
    CODE END;
    CODE /
    CODE
    PLSQL

    put_file ("${tab}_ins_pl.sql", $code);
    return 1;
}

return 1;
